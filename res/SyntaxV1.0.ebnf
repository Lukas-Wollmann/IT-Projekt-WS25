Letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";

Digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";

HexDigit = Digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f";

BinaryDigit = "0" | "1";

UnaryOperator = "+" | "-" | "!" | "*" | "~";

BinaryOperator = "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "&&" | "||" | "==" | "<" | ">" | "<=" | ">=" | "!=" | "<<" | ">>" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<=" | ">>=" | "=";

Identifier = "_" | Letter, { "_" | Letter | Digit };

PrimitiveType = "string" | "char" | "bool" | "u32" | "i32" | "f32";

Integer = ( "0x", HexDigit, { HexDigit } ) | ( "0b", BinaryDigit, { BinaryDigit } ) | Digit, { Digit };

FloatingPoint = ( ".", Digit, { Digit } ) | ( Digit, { Digit }, ".", { Digit } );

Number = Integer | FloatingPoint;

BooleanLiteral = "true" | "false";

CharLiteral = "'", UTF8CHARACTER, "'";

StringLiteral = '"', { UTF8CHARACTER }, '"';

Literal = StringLiteral | CharLiteral | BooleanLiteral | Number;

Type = ArrayType | PointerType | FunctionType | PrimitiveType | Identifier;

ArrayType = "[", [ Integer ], "]", Type;

PointerType = "*", Type;

Statement = ( Expression | Declaration, ";" ) | CodeBlock | Loop | IfBlock;

Declaration = Identifier, ":", Type, "=", Expression;

CodeBlock = "{", { Statement }, "}";

Loop = "while", "(", Expression, ")", CodeBlock;

IfBlock = "if", "(", Expression, ")", CodeBlock, { "else", IfBlock }, [ "else", CodeBlock ];

BinaryExpression = Expression, BinaryOperator, Expression;

UnaryExpression = UnaryOperator, Expression;

PrimaryExpression = Identifier | FunctionCall | Literal | ArrayExpression;

ArrayExpression = ArrayType, "{", { Expression }, "}";

Expression = PrimaryExpression | BinaryExpression | UnaryExpression | ( "(", Expression, ")" ) | ( Identifier, "[", Expression, "]" ) | ( "new", Type, "(", [ Expression ], ")" );

FunctionCall = Identifier, "(", [ Expression, { ",", Expression } ], ")";

FunctionDeclaration = "func", Identifier, "(", [ Identifier, ":", Type, { ",", Identifier, ":", Type } ], ")", [ "->", Type | ( "(", [ Type ], ")" ) ], CodeBlock;

File = { FunctionDeclaration };